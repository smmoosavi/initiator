<?php

namespace DoctrineProxies\__CG__\smomoo\models;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \smomoo\models\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'id', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'username', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'password', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'mail', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'status', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'type', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'metas');
        }

        return array('__isInitialized__', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'id', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'username', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'password', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'mail', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'status', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'type', '' . "\0" . 'smomoo\\models\\User' . "\0" . 'metas');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setMail($mail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMail', array($mail));

        return parent::setMail($mail);
    }

    /**
     * {@inheritDoc}
     */
    public function getMail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMail', array());

        return parent::getMail();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function addMeta(\smomoo\models\UserMeta $metas)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMeta', array($metas));

        return parent::addMeta($metas);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMeta($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMeta', array($key));

        return parent::removeMeta($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetas()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetas', array());

        return parent::getMetas();
    }

    /**
     * {@inheritDoc}
     */
    public function checkPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkPassword', array($password));

        return parent::checkPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function setRecoveryPasswordCode($c)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecoveryPasswordCode', array($c));

        return parent::setRecoveryPasswordCode($c);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRecoveryPasswordCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRecoveryPasswordCode', array());

        return parent::removeRecoveryPasswordCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getMeta($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMeta', array($key));

        return parent::getMeta($key);
    }

    /**
     * {@inheritDoc}
     */
    public function setMeta($key, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMeta', array($key, $value));

        return parent::setMeta($key, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function findMeta()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'findMeta', array());

        return parent::findMeta();
    }

    /**
     * {@inheritDoc}
     */
    public function persist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'persist', array());

        return parent::persist();
    }

    /**
     * {@inheritDoc}
     */
    public function refresh()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'refresh', array());

        return parent::refresh();
    }

    /**
     * {@inheritDoc}
     */
    public function fieldValue($field)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fieldValue', array($field));

        return parent::fieldValue($field);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray($fields = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array($fields));

        return parent::toArray($fields);
    }

}
